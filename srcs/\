/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jescully <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/01 13:00:43 by jescully          #+#    #+#             */
/*   Updated: 2021/10/05 13:37:22 by jescully         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/push_swap.h"
#include "../libft/libft.h"
#include <stdio.h>

static int  ft_iswhitespace(int c)
{
    if (c == '\v' || c == '\r' || c == '\f' || \
            c == ' ' || c == '\n' || c == '\t')
        return (1);
    else
        return (0);
}

int ft_isnumber(char *nbrstr)
{
    int i;

    i = 0;
    while (nbrstr[i])
    {
        if (!ft_isdigit(nbrstr[i]) && !ft_iswhitespace(nbrstr[i]))
            return (0);
    }
    return (1);
}

int concat_arg(char **argv, int argc)
{
    int i;
    char *argstr;
    char *temp;

    i = 1;
    while (i < argc)
    {
        temp = ft_strjoin(argv[i], " ");
        argstr = ft_strjoin(temp, argv[i]);
        free(temp);
        i++;
    }
    printf("this is argstr: %s \n", argstr);
    return (1);
}

int fill_stack(t_stacks *s, char **argv, int argc)
{
    int d;
    int i;

    s->size_a = argc -1;
    s->size_b = 0;
    s->start_b = argc - 1;
    i = s->size_a;
    d = 0;
    while (i > 0)
    {
        if (!ft_isnumber(argv[d + 1]))
            return (0);
        s->stacks[i - 1] = ft_atoi(argv[d + 1]);
        i--;
        d++;
    }
    return (1);
}

void print_stacks(t_stacks *s, int argc)
{
    int d;

    d = 0;
    printf("     stack 1          stack 2\n");
    while (d < argc - 1)
    {
        printf("        ");
        if (d < s->size_a)
            printf("%d", s->stacks[d]);
        else
            printf(" ");
        printf("                ");
        if (d < s->size_b && s->size_b != 0)
            printf("%d", s->stacks[d + s->start_b]);
        printf("\n");
        d++;
    }

}


int	main(int argc, char **argv)
{
    t_stacks *s;

    s = (t_stacks *)(malloc((sizeof(t_stacks))));
    s->stacks = (int *)(malloc((sizeof(int) * (argc - 1)) * 2));//protect em
    fill_stack(s, argv, argc);
    print_stacks(s, argc);
    concat_arg(argv, argc);
    //	if (is_sorted(s, 0, s->size_a))
    //		return 0; 
    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    swap_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    push_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_a(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_b(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    reverse_rotate_both(s);
    printf("\n\n\n\n");
    print_stacks(s, argc);

    free (s);
    return 0;
}
